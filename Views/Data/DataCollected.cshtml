@model List<FYP.Models.Ticket>

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            box-sizing: border-box;
        }
        body {
            margin: 0;
            background-repeat: no-repeat;
            background-size: cover;
            background-attachment: fixed;
            height: 100vh;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
            background-color: white;
            margin-bottom: 20px;
            padding: 20px;
            border-radius: 5px;
        }
        .chart-container {
            width: 50%;
            padding: 20px;
            box-sizing: border-box;
        }
        .button {
            background-color: dodgerblue;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        input[type="date"] {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }
        h1, h2 {
            margin: 0;
            color: #333;
        }
        canvas {
            width: 100%;
            height: auto;
        }
        .btn-primary {
            background-color: #C1C8E4;
            border-color: #C1C8E4;
        }

            .btn-primary:hover {
                background-color: #91A0D9; 
                border-color: #91A0D9; 
            }
    </style>
    <title>Data Collected</title>
</head>

<body background="\Images\MainBackground.jpg">
    <button class="button" onclick="location.href='/Home/Index'"> Back</button>
    <div class="container"> 
    <div>
        <label for="startDate" style="display: block; margin-bottom: 5px;">Start Date:</label>
        <input type="date" id="startDate" name="startDate" style="margin-bottom: 10px;">
    </div>
    <div>
        <label for="endDate" style="display: block; margin-bottom: 5px;">End Date:</label>
        <input type="date" id="endDate" name="endDate" style="margin-bottom: 10px;">
    </div>
</div>
    <button class="button" onclick="applyDateRange()">Apply</button>

    <div class="container">
        <div class="chart-container">
            <h2>Status</h2>
            <canvas id="statusChart"></canvas>
        </div>
        <div class="chart-container">
            <h2>Priority</h2>
            <canvas id="priorityChart"></canvas>
        </div>
    </div>
    <div class="container">
        <div class="chart-container">
            <h2>Category</h2>
            <canvas id="categoryChart"></canvas>
        </div>
        <div class="chart-container">
            <h2>Ticket Type</h2>
            <canvas id="typeChart"></canvas>
        </div>
    </div>

    <script>
        var statusData = {
            labels: ['Pending', 'Logged', 'active', 'waiting','Resolved', 'Closed'],
            datasets: [{
                label: 'Status',
                data: [
        @Model.Where(ticket => ticket.Status == "pending").Sum(ticket => ticket.StatusCount),
        @Model.Where(ticket => ticket.Status == "logged").Sum(ticket => ticket.StatusCount),
        @Model.Where(ticket => ticket.Status == "active").Sum(ticket => ticket.StatusCount),
        @Model.Where(ticket => ticket.Status == "waiting for resolution").Sum(ticket => ticket.StatusCount),
        @Model.Where(ticket => ticket.Status == "resolved").Sum(ticket => ticket.StatusCount),
        @Model.Where(ticket => ticket.Status == "closed").Sum(ticket => ticket.StatusCount)
                                    ],
                backgroundColor: [
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                ]
            }]
        };

        var priorityData = {
            labels: ['Low', 'Medium', 'High', 'Critical'],
            datasets: [{
                label: 'Priority',
                data: [
        @Model.Where(ticket => ticket.Priority == "low").Sum(ticket => ticket.PriorityCount),
        @Model.Where(ticket => ticket.Priority == "medium").Sum(ticket => ticket.PriorityCount),
        @Model.Where(ticket => ticket.Priority == "high").Sum(ticket => ticket.PriorityCount),
        @Model.Where(ticket => ticket.Priority == "critical").Sum(ticket => ticket.PriorityCount),

                ],
                backgroundColor: [
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                ]
            }]
        };

        var categoryData = {
            labels: ['Software','Hardware','Network','Access Portal'],
            datasets: [{
                label: 'Category',
                data: [
        @Model.Where(ticket => ticket.category_id == 1).Sum(ticket => ticket.CategoryCount),
        @Model.Where(ticket => ticket.category_id == 2).Sum(ticket => ticket.CategoryCount),
        @Model.Where(ticket => ticket.category_id == 3).Sum(ticket => ticket.CategoryCount),
        @Model.Where(ticket => ticket.category_id == 4).Sum(ticket => ticket.CategoryCount),
                ],
                backgroundColor: [
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                ]
            }]
        };

        var typeData = {
            labels: ['Request', 'problem', 'incident'],
            datasets: [{
                label: 'Type',
                data: [
        @Model.Where(ticket => ticket.Type == "request").Sum(ticket => ticket.TypeCount),
        @Model.Where(ticket => ticket.Type == "problem").Sum(ticket => ticket.TypeCount),
        @Model.Where(ticket => ticket.Type == "incident").Sum(ticket => ticket.TypeCount),
                ],
                backgroundColor: [
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                    'rgba(39, 202, 245, 0.8)',
                ]
            }]
        }

        @*============ To display the values extracted from above to the diagrams [Render Charts] ============*@
        var statusCtx = document.getElementById('statusChart').getContext('2d');
        var statusChart = new Chart(statusCtx, { //Form new chart 
            type: 'bar', //Set the chart type
            data: statusData, //Which data to extract from
        });

        var priorityCtx = document.getElementById('priorityChart').getContext('2d');
        var priorityChart = new Chart(priorityCtx, {
            type: 'bar',
            data: priorityData,
        });

        var categoryCtx = document.getElementById('categoryChart').getContext('2d');
        var categoryChart = new Chart(categoryCtx, {
            type: 'bar',
            data: categoryData,
        });

        var typeCtx = document.getElementById('typeChart').getContext('2d'); 
        var typeChart = new Chart(typeCtx, {
            type: 'bar',
            data: typeData,
        });

        //Confirm Exit Page
        function showMessage() {
            var confirmation = confirm("Leave page?");

            if (confirmation) {
                window.location.href = "/Home/Index";
            } else {

            }
        }

        //Functions User input for the date range
        function applyDateRange() {
            var startDateInput = document.getElementById("startDate"); //Retrieve the startdate input
            var endDateInput = document.getElementById("endDate"); //Retrieve enddate input
            var startDate = startDateInput.value; //Stores the input as variable
            var endDate = endDateInput.value; //stores the input as variable
            window.location.href = "/Data/DataCollected?startDate=" + startDate + "&endDate=" + endDate;
        }
    </script>
</body>
</html>

